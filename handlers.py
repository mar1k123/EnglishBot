from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from pyexpat.errors import messages
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.fsm.context import FSMContext    # –Ω—É–∂–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏



import keyboards as kb
from user import User


class Reg(StatesGroup):    #–∫–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    Aword = State()
    Rword = State()


import config

bot = Bot(token=config.BOT_TOKEN)
router = Router()
users = {}

@router.message(Command("hi"))
async def start_handler(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫,\n–≤—ã–±–µ—Ä–∏ –∫–æ–≥–æ —Ç–æ –∏–∑ –Ω–∞—Åüëá:",
                     reply_markup=kb.main) #kb.main –±—ã–ª–æ –¥–ª—è ReplyKB, settings –¥–ª—è Inline KB + awain... –¥–ª—è –º–æ–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ KB


@router.message(F.text == "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_button_handler(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –∫–æ–≥–æ —Ç–æ –∏–∑ –Ω–∞—Åüëá:",
                     reply_markup=kb.main)



@router.callback_query(F.data == "My profile")
async def my_profile(callback: CallbackQuery):
    await callback.answer("") #–∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + show_alert=True –¥–µ–ª–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await callback.message.edit_text("–í–æ—Ç –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ Git Hub:", reply_markup=await kb.inline_profile())



@router.message(Command("start"))
async def step_one(message: Message, state: FSMContext):
    await state.set_state(Reg.Aword)
    users[f'{message.from_user.id}'] = User(message.from_user.id)
    await message.answer("üëã–ü—Ä–∏–≤–µ—Ç, –≤–≤–µ–¥–∏ –∞–Ω–≥–ª —Å–ª–æ–≤–æ: \n")


@router.message(Reg.Aword)
async def step_two(message: Message, state: FSMContext):   # –°–ª–æ–≤–∏–ª–µ –∏–º—è
    users[f'{message.from_user.id}'].Aword = message.text
    await state.set_state(Reg.Rword)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")




@router.message(Reg.Rword)
async def step_four(message: Message, state: FSMContext):
    users[f'{message.from_user.id}'].Rword = message.text
    user = users[f'{message.from_user.id}']
    user.save()
    await message.answer(f"–¢—ã –∑–∞–ø–∏—Å–∞–ª —Å–ª–æ–≤–∞üòÄ.–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüëá\n\n{user}", reply_markup=kb.main_menu_button(message.from_user.id))
    await state.set_state(Reg.Aword)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª —Å–ª–æ–≤–æ")






@router.message(Command("allusers"))
async def show_users(msg: Message):
    for user in User.get_all_users().values():
        await msg.answer(str(user))










@router.message()
async def noCommands_handler(msg: Message):
    await msg.reply("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç—É")