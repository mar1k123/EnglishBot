import random
from email.policy import default
from symtable import Class
# from aiogram.client.default import DefaultBotProperties, Default
# from aiogram.enums import ParseMode
from aiogram import Router, Bot, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, User, Chat, Update
from pyexpat.errors import messages
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.fsm.context import FSMContext# –Ω—É–∂–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from keyboards import get_levels_keyboard
import keyboards as kb



# from html import escape
import asyncio
from datetime import datetime
from typing import Callable
import time
import csv
import os
import sqlite3
import sys
from database import init_common_words
import keyboards
import config


'''--------------------------------------------------------------------------------------------------------------------------------------'''
#SQLite functions

# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_exists(user_id: int) -> bool:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
    exists = cursor.fetchone() is not None
    conn.close()
    return exists



# –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_word(user_id: int, aword: str, rword: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO words (user_id, aword, rword) VALUES (?, ?, ?)',
        (user_id, aword, rword)
    )
    conn.commit()
    conn.close()



# –ü–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_words(user_id: int) -> Dict[str, str]:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT aword, rword FROM words WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()
    conn.close()
    return {aword: rword for aword, rword in rows} if rows else {}


# –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_random_aword(user_id: int) -> Optional[str]:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT aword FROM words 
        WHERE user_id = ? 
        ORDER BY RANDOM() 
        LIMIT 1
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None



# –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —Å–ª–æ–≤—É
def get_rword_by_aword(user_id: int, aword: str) -> Optional[str]:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT rword FROM words 
        WHERE user_id = ? AND aword = ?
    ''', (user_id, aword))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None
'''-----------------------------------------------------------------------------------------------------------------------------'''




'''CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV'''

# –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–µ —Å–ª–æ–≤–∞ –∏–∑ CSV –ø–æ —É—Ä–æ–≤–Ω—é
def get_common_words(level: str) -> Dict[str, str]:
    words = {}
    with open(COMMON_WORDS_CSV, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['level'] == level:
                words[row['english']] = row['russian']
    return words



# –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ –æ–±—â–∏—Ö —Å–ª–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é
def get_random_common_word(level: str) -> Optional[Tuple[str, str]]:
    words = []
    with open(COMMON_WORDS_CSV, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['level'] == level:
                words.append((row['english'], row['russian']))
    return random.choice(words) if words else None



#–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞ —Å –æ–±—â–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
def get_available_levels() -> List[str]:
    levels = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    try:
        with open(COMMON_WORDS_CSV, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if 'level' in row:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ level
                    levels.add(row['level'])
    except FileNotFoundError:
        print(f"–§–∞–π–ª {COMMON_WORDS_CSV} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...")
        init_common_words()  # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        return get_available_levels()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–µ–±—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
        return []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (A1, A2, B1, B2, C1, C2)
    sorted_levels = sorted(levels, key=lambda x: (x[0], int(x[1])))
    return sorted_levels

'''CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV CSV '''





class Words(StatesGroup):
    Translate = State()


class QuizStates(StatesGroup):
    SELECTING_MODE = State()
    SELECTING_LEVEL = State()
    ANSWERING = State()



class DeleteStates(StatesGroup):
    waiting_for_word = State()


running_processes = True
running_processes = True



class Words(StatesGroup):
    Original = State()
    Translate = State()
    Cnt = "cnt"



class Reg(StatesGroup):  #–∫–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    Aword = State()
    Rword = State()


class TimerStates(StatesGroup):
    SETTING_INTERVAL = State()
    waiting_interval = State()


DB_PATH = os.path.join(os.path.dirname(__file__), 'vocabulary_bot.db')
COMMON_WORDS_CSV = "common_words.csv"
CSV_PATH = "Users.csv"
DICT_PATH = "Storage.py"







bot = Bot(token=config.BOT_TOKEN)
router = Router()
users = {}


user_timers = {}
user_attempts = {}


'''------------------------------------------------------------------------------------------------------------------------------------'''

@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id

    if not user_exists(user_id):
        add_user(user_id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤. –Ø —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.")
    else:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    await message.answer("\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:"
                     "\n/add - –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥"
                     "\n/delete_word - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"
                     "\n/allwords - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
                     "\n/check - –±–æ—Ç –≤—ã–≤–µ–¥–µ—Ç —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (2 –ø–æ–ø—ã—Ç–∫–∏)üëá"
                     "\n/check_reverse - —Ç–æ –∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ check, –Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞", parse_mode="HTML")

'''-------------------------------------------------------------------------------------------------------------------------------------'''

# @router.message(F.text == "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
# async def main_menu_button_handler(msg: Message):
#     await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Åüëá:",
#                      reply_markup=kb.main)


@router.message(Command("myid"))
async def get_my_id(message: Message):
    await message.answer(f"–í–∞—à ID: `{message.from_user.id}`", parse_mode="Markdown")

'''----------------------------------------------------------------------------------------------------------------------------------------'''

@router.message(Command("allwords"))
async def show_my_words(message: Message):
    user_id = message.from_user.id
    words = get_user_words(user_id)

    if not words:
        await message.answer("–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /add")
        return

    response = "üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n"
    for aword, rword in words.items():
        response += f"{aword} - {rword}\n"

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4000:
        for x in range(0, len(response), 4000):
            await message.answer(response[x:x + 4000])
    else:
        await message.answer(response)

'''-----------------------------------------------------------------------------------------------------------------------------------------'''

@router.message(Command("add"))
async def step_one(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not user_exists(user_id):
        add_user(user_id)

    await state.set_state(Reg.Aword)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤–≤–µ–¥–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:\n"
                         "<i>–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥ —Å–ª–æ–≤, –≤–ø–∏—Å–∞–≤ –≤ —á–∞—Ç <b>'–°—Ç–æ–ø'</b> –∏–ª–∏ <b>'Stop'</b></i>",
                         parse_mode="HTML")


@router.message(Reg.Aword)
async def step_two(message: Message, state: FSMContext):
    user_text = message.text.strip()
    user_id = message.from_user.id

    if user_text.lower() in ["—Å—Ç–æ–ø", "stop"]:
        await message.answer("–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–≤–æ–¥ —Å–ª–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—Éüëá")
        await state.clear()
        return

    await state.update_data(aword=user_text)
    await state.set_state(Reg.Rword)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")


@router.message(Reg.Rword)
async def step_four(message: Message, state: FSMContext):
    user_text = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    aword = data.get('aword', '')

    if user_text.lower() in ["—Å—Ç–æ–ø", "stop"]:
        await message.answer("–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–≤–æ–¥ —Å–ª–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—Éüëá")
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_word(user_id, aword, user_text)
    await message.answer(f"<b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤–æ:</b>\n{aword} - {user_text}\n\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:",
                         parse_mode="HTML")
    await state.set_state(Reg.Aword)

'''-----------------------------------------------------------------------------------------------------------------------------------'''


@router.message(Command("delete_word"))
async def delete_word_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not user_exists(user_id):
        await message.answer("‚ùå –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add")
        return

    await state.set_state(DeleteStates.waiting_for_word)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")


@router.message(DeleteStates.waiting_for_word)
async def process_deletion(message: Message, state: FSMContext):
    user_id = message.from_user.id
    word = message.text.strip()

    conn = None
    try:
        conn = sqlite3.connect('vocabulary_bot.db', timeout=10)
        conn.execute("PRAGMA journal_mode=WAL")
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
        cursor.execute("""
            SELECT COUNT(*) FROM words 
            WHERE user_id = ? AND LOWER(aword) = LOWER(?)
        """, (user_id, word))

        if cursor.fetchone()[0] == 0:
            await message.answer(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ
        cursor.execute("""
            DELETE FROM words 
            WHERE user_id = ? AND LOWER(aword) = LOWER(?)
        """, (user_id, word))
        conn.commit()

        await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ!")

    except sqlite3.OperationalError as e:
        if "locked" in str(e):
            await message.answer("üîí –ë–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
        else:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if conn:
            conn.close()
    await state.clear()

#–ó–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
async def ask_next_word(msg: Message, state: FSMContext):
    data = await state.get_data()
    words = data['words']

    if not words:
        await state.clear()
        return await msg.answer("–°–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", reply_markup=ReplyKeyboardRemove())

    aword = random.choice(list(words.keys()))
    await state.update_data({
        "current_word": aword,
        "attempts": 0,
        "correct_answer": words[aword],
        "remaining_words": {k: v for k, v in words.items() if k != aword}
    })
    await msg.answer(f"üá¨üáß –°–ª–æ–≤–æ: {aword}\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")


'''------------------------------------------------------------------------------------------------------------------------------------'''


#–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ (–ª–∏—á–Ω—ã–µ and –æ–±—â–∏–µ —Å–ª–æ–≤–∞)
@router.message(Command("check"))
async def start_check(msg: Message, state: FSMContext):

    await state.set_state(QuizStates.SELECTING_MODE)
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–õ–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞")],
                [KeyboardButton(text="–û–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å")],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
@router.message(QuizStates.SELECTING_MODE)
async def select_mode(msg: Message, state: FSMContext):
    if msg.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())

    if msg.text == "–õ–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞":
        words = get_user_words(msg.from_user.id)
        if not words:
            await state.clear()
            return await msg.answer("–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add")

        await state.set_state(QuizStates.ANSWERING)
        await state.update_data({
            "words": words,
            "mode": "personal",
            "level": None
        })
        await msg.answer("–†–µ–∂–∏–º: –ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞", reply_markup=ReplyKeyboardRemove())
        return await ask_next_word(msg, state)

    if msg.text == "–û–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å":
        await state.set_state(QuizStates.SELECTING_LEVEL)
        return await msg.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:",
            reply_markup=get_levels_keyboard()
        )

    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è –æ–±—â–∏—Ö —Å–ª–æ–≤
@router.message(QuizStates.SELECTING_LEVEL)
async def select_level(msg: Message, state: FSMContext):
    if msg.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())

    level = msg.text.replace("–£—Ä–æ–≤–µ–Ω—å ", "").strip().upper()
    words = get_common_words(level)

    if not words:
        return await msg.answer(f"–î–ª—è —É—Ä–æ–≤–Ω—è {level} –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤")

    await state.set_state(QuizStates.ANSWERING)
    await state.update_data({
        "words": words,
        "mode": "common",
        "level": level
    })
    await msg.answer(f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {level}", reply_markup=ReplyKeyboardRemove())
    await ask_next_word(msg, state)


# –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
async def ask_next_word(msg: Message, state: FSMContext):
    data = await state.get_data()
    words = data["words"]
    mode = data["mode"]

    if mode == "personal":
        aword = random.choice(list(words.keys()))
        rword = words[aword]
    else:  # common
        level = data["level"]
        word_pair = get_random_common_word(level)
        if not word_pair:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        aword, rword = word_pair

    await state.update_data({
        "correct_answer": rword,
        "current_word": aword,
        "attempts": 0
    })
    await msg.answer(f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: {aword}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(QuizStates.ANSWERING)
async def check_answer(msg: Message, state: FSMContext):
    data = await state.get_data()

    if msg.text.lower() in ["—Å—Ç–æ–ø", "stop", "–æ—Ç–º–µ–Ω–∞"]:
        await state.clear()
        return await msg.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())

    correct = data['correct_answer']
    user_answer = msg.text.lower()

    if user_answer == correct.lower():
        await msg.reply("‚úÖ –í–µ—Ä–Ω–æ!")
        return await ask_next_word(msg, state)

    attempts = data['attempts'] + 1
    if attempts >= 2:
        await msg.answer(f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}")
        return await ask_next_word(msg, state)

    await state.update_data({"attempts": attempts})
    await msg.reply("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


'''-------------------------------------------------------------------------------------------------------------------------------------------'''
class QuizStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∞–Ω–≥–ª -> —Ä—É—Å)
    SELECTING_MODE = State()
    SELECTING_LEVEL = State()
    ANSWERING = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä—É—Å -> –∞–Ω–≥–ª)
    REVERSE_SELECTING_MODE = State()
    REVERSE_SELECTING_LEVEL = State()
    REVERSE_ANSWERING = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_reverse
@router.message(Command("check_reverse"))
async def start_check_reverse(msg: Message, state: FSMContext):
    await state.set_state(QuizStates.REVERSE_SELECTING_MODE)
    await msg.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (–ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–õ–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞")],
                [KeyboardButton(text="–û–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å")],
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
@router.message(QuizStates.REVERSE_SELECTING_MODE)
async def handle_reverse_mode(msg: Message, state: FSMContext):
    if msg.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())

    if msg.text == "–õ–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞":
        words = get_user_words(msg.from_user.id)
        if not words:
            await state.clear()
            return await msg.answer("–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ /add")

        await state.set_state(QuizStates.REVERSE_ANSWERING)
        await state.update_data({
            "words": words,
            "mode": "personal",
            "level": None
        })
        await msg.answer("–†–µ–∂–∏–º: –ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞", reply_markup=ReplyKeyboardRemove())
        return await ask_next_reverse_question(msg, state)

    if msg.text == "–û–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å":
        await state.set_state(QuizStates.REVERSE_SELECTING_LEVEL)
        return await msg.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:",
            reply_markup=get_levels_keyboard()
        )

    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
@router.message(QuizStates.REVERSE_SELECTING_LEVEL)
async def handle_reverse_level(msg: Message, state: FSMContext):
    if msg.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        return await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())

    level = msg.text.replace("–£—Ä–æ–≤–µ–Ω—å ", "").strip().upper()
    words = get_common_words(level)

    if not words:
        return await msg.answer(f"–î–ª—è —É—Ä–æ–≤–Ω—è {level} –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤")

    await state.set_state(QuizStates.REVERSE_ANSWERING)
    await state.update_data({
        "words": words,
        "mode": "common",
        "level": level
    })
    await msg.answer(f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {level}", reply_markup=ReplyKeyboardRemove())
    await ask_next_reverse_question(msg, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
async def ask_next_reverse_question(msg: Message, state: FSMContext):
    data = await state.get_data()
    words = data["words"]
    mode = data["mode"]

    if mode == "personal":
        aword = random.choice(list(words.keys()))
        rword = words[aword]
    else:
        level = data["level"]
        word_pair = get_random_common_word(level)
        if not word_pair:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        aword, rword = word_pair

    await state.update_data({
        "correct_answer": aword,
        "current_rword": rword,
        "attempts": 0
    })
    await msg.answer(f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {rword}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
@router.message(QuizStates.REVERSE_ANSWERING)
async def check_reverse_answer(msg: Message, state: FSMContext):
    data = await state.get_data()

    if msg.text.lower() in ["—Å—Ç–æ–ø", "stop", "–æ—Ç–º–µ–Ω–∞"]:
        await state.clear()
        return await msg.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=ReplyKeyboardRemove())

    correct = data['correct_answer'].lower()
    user_answer = msg.text.lower()

    if user_answer == correct:
        await msg.reply("‚úÖ –í–µ—Ä–Ω–æ!")
        return await ask_next_reverse_question(msg, state)

    attempts = data['attempts'] + 1
    if attempts >= 2:
        await msg.answer(f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {data['correct_answer']}")
        return await ask_next_reverse_question(msg, state)

    await state.update_data({"attempts": attempts})
    await msg.reply("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

'''-------------------------------------------------------------------------------------------------------------------------------------'''








# @router.message(Command("check_db"))
# async def check_db(msg: Message):
#     conn = sqlite3.connect(DB_PATH)
#     cursor = conn.cursor()
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è C2
#     cursor.execute("SELECT COUNT(*) FROM common_words WHERE level = 'C2'")
#     count = cursor.fetchone()[0]
#
#     # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤
#     cursor.execute("SELECT english, russian FROM common_words WHERE level = 'C2' LIMIT 5")
#     examples = cursor.fetchall()
#
#     conn.close()
#
#     await msg.answer(
#         f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n"
#         f"–°–ª–æ–≤ C2 —É—Ä–æ–≤–Ω—è: {count}\n"
#         f"–ü—Ä–∏–º–µ—Ä—ã: {examples}"
#     )


















@router.message()
async def noCommands_handler(msg: Message):
    await msg.reply("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç—É")