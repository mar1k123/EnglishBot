import random
from email.policy import default
from symtable import Class
# from aiogram.client.default import DefaultBotProperties, Default
# from aiogram.enums import ParseMode
from aiogram import Router, Bot, F, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, User, Chat, Update
from pyexpat.errors import messages
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.fsm.context import FSMContext# –Ω—É–∂–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
import changer
# from html import escape
import asyncio
from datetime import datetime
from typing import Callable


running_processes = True

import keyboards as kb
from user import User
# Def = DefaultBotProperties(parse_mode=ParseMode.HTML)

running_processes = True

class Words(StatesGroup):
    Original = State()
    Translate = State()
    Cnt = "cnt"

user_timers = {}


class Reg(StatesGroup):  #–∫–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    Aword = State()
    Rword = State()


class TimerStates(StatesGroup):
    waiting_interval = State()


user_attempts = {}


import config

bot = Bot(token=config.BOT_TOKEN)
router = Router()
users = {}



@router.message(Command("start"))
async def start_handler(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, –Ø —Ç–≤–æ–π <i>English bot</i>, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±—ã—Å—Ç—Ä–µ–µ‚úî"
                     "\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:"
                     "\n/add - –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥"
                     "\n/check - –±–æ—Ç –≤—ã–≤–µ–¥–µ—Ç —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (2 –ø–æ–ø—ã—Ç–∫–∏)üëá", parse_mode="HTML")



@router.message(F.text == "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_button_handler(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Åüëá:",
                     reply_markup=kb.main)





@router.message(Command("add"))
async def step_one(message: Message, state: FSMContext):
    await state.set_state(Reg.Aword)
    users[f'{message.from_user.id}'] = User(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –≤–≤–µ–¥–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:\n"
                         "<i>–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –≤–≤–æ–¥ —Å–ª–æ–≤, –≤–ø–∏—Å–∞–≤ –≤ —á–∞—Ç <b>'C—Ç–æ–ø'</b> –∏–ª–∏ <b>'Stop'</b> 2 —Ä–∞–∑–∞\n</i>", parse_mode="HTML")



@router.message(Reg.Aword)
async def step_two(message: Message, state: FSMContext):
    users[f'{message.from_user.id}'].Aword = message.text
    await state.set_state(Reg.Rword)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")





@router.message(Reg.Rword)
async def step_four(message: Message, state: FSMContext):
    users[f'{message.from_user.id}'].Rword = message.text
    user = users[f'{message.from_user.id}']
    if message.text in ["–°—Ç–æ–ø","Stop"]:
        await message.answer("–í—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–≤–æ–¥ —Å–ª–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—Éüëá")
        await state.clear()
    else:
        user.save()
        await message.answer(f"<b>–¢–µ–∫—É—â–µ–µ</b>:\n{user}–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ", parse_mode="HTML")
        await state.set_state(Reg.Aword)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª. —Å–ª–æ–≤–æ")



@router.message(Command("allusers"))
async def show_users(msg: Message):
    for user in User.get_all_users().values():
        await msg.answer(str(user))


@router.message(Command("check"))
async def random_ew(msg: Message, state: FSMContext):
    await state.set_state(Words.Original)
    a = random.choice(list(changer.data.keys()))
    await msg.answer(a)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
    await state.update_data(words=a, cnt=0, waiting_for_answer=True)


@router.message(Words.Original)
async def translate(msg: Message, state: FSMContext):
    data = await state.get_data()
    a = data["words"]
    cnt = data["cnt"]
    waiting_for_answer = data.get("waiting_for_answer", True)

    if waiting_for_answer:
        if msg.text.lower() == changer.data[a]["Rword"].lower():
            await msg.reply("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            a = random.choice(list(changer.data.keys()))
            await msg.answer(a)
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
            await state.update_data(words=a, cnt=0, waiting_for_answer=True)
        elif msg.text.lower() in ["—Å—Ç–æ–ø", "stop"]:
            await msg.answer("<b>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ—Ä–∏—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—Éüëá", parse_mode="HTML")
            await state.clear()
        else:
            cnt += 1
            if cnt >= 2:
                await msg.answer(f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {changer.data[a]['Rword']}")
                a = random.choice(list(changer.data.keys()))
                await msg.answer(a)
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
                await state.update_data(words=a, cnt=0, waiting_for_answer=True)
            else:
                await msg.answer("üîÑ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
                await state.update_data(cnt=cnt, waiting_for_answer=True)
    else:
        await state.update_data(waiting_for_answer=True)










@router.message(Command("check_reverse"))
async def random_rw(msg: Message, state: FSMContext):
    await state.set_state(Words.Translate)
    a = random.choice(list(changer.data.keys()))
    russian_word = changer.data[a]["Rword"]
    await msg.answer(russian_word)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:")
    await state.update_data(words=a, cnt=0, waiting_for_answer=True)


@router.message(Words.Translate)
async def check_english(msg: Message, state: FSMContext):
    data = await state.get_data()
    a = data["words"]
    cnt = data["cnt"]
    waiting_for_answer = data.get("waiting_for_answer", True)

    if waiting_for_answer:
        if msg.text.lower() == a.lower():
            await msg.reply("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            a = random.choice(list(changer.data.keys()))
            russian_word = changer.data[a]["Rword"]
            await msg.answer(russian_word)
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:")
            await state.update_data(words=a, cnt=0, waiting_for_answer=True)
        elif msg.text.lower() in ["—Å—Ç–æ–ø", "stop"]:
            await msg.answer("<b>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ—Ä–∏—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–æ–º–∞–Ω–¥—Éüëá", parse_mode="HTML")
            await state.clear()
        else:
            cnt += 1
            if cnt >= 2:
                await msg.answer(f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {a}")
                a = random.choice(list(changer.data.keys()))
                russian_word = changer.data[a]["Rword"]
                await msg.answer(russian_word)
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:")
                await state.update_data(words=a, cnt=0, waiting_for_answer=True)
            else:
                await msg.answer("üîÑ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
                await state.update_data(cnt=cnt, waiting_for_answer=True)
    else:
        await state.update_data(waiting_for_answer=True)









@router.message()
async def noCommands_handler(msg: Message):
    await msg.reply("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç—É")











