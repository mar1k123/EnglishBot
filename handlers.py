from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from pyexpat.errors import messages
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.fsm.context import FSMContext    # –Ω—É–∂–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏



import keyboards as kb
from user import User


class Reg(StatesGroup):    #–∫–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    name = State()
    Age = State()
    Sex = State()


import config

bot = Bot(token=config.BOT_TOKEN)
router = Router()
users = {}

@router.message(Command("hi"))
async def start_handler(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫,\n–≤—ã–±–µ—Ä–∏ –∫–æ–≥–æ —Ç–æ –∏–∑ –Ω–∞—Åüëá:",
                     reply_markup=kb.main) #kb.main –±—ã–ª–æ –¥–ª—è ReplyKB, settings –¥–ª—è Inline KB + awain... –¥–ª—è –º–æ–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ KB


@router.message(F.text == "üìú –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_button_handler(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏ –∫–æ–≥–æ —Ç–æ –∏–∑ –Ω–∞—Åüëá:",
                     reply_markup=kb.main)

@router.message(Command ("id"))
async def id_handler(msg: Message):
    await msg.answer(f"–í–∞—à <b>Username</b>: {msg.from_user.username}\n"
                      f"–í–∞—à Id: {msg.from_user.id}", parse_mode="HTML")


@router.message(Command("photo_id"))
async def photo_id_handler(msg: Message):
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø–æ–ª—É—á–∏ id")




@router.message(F.photo)
async def id_photo(msg: Message):
    await msg.reply(f"ID —Ñ–æ—Ç–æc: {msg.photo[-1].file_id}")


@router.message(Command("my_logo"))
async def my_logo_handler(msg: Message):
    await msg.answer_photo(photo="AgACAgIAAxkBAAM1Zuwh_WXGTvXVHB1S7TOxhonWdf8AAs7eMRvSDGFLRZRnRZH6hO4BAAMCAAN4AAM2BA")


@router.callback_query(F.data == "My profile")
async def my_profile(callback: CallbackQuery):
    await callback.answer("") #–∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + show_alert=True –¥–µ–ª–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await callback.message.edit_text("–í–æ—Ç –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ Git Hub:", reply_markup=await kb.inline_profile())




@router.callback_query(F.data == "My subjects")
async def my_profile(callback: CallbackQuery):
    await callback.answer("") #–∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + show_alert=True –¥–µ–ª–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await callback.message.edit_text("–í–æ—Ç —á—Ç–æ —è —Å–¥–∞—é –Ω–∞ –æ–≥—ç:", reply_markup=await kb.inline_subject()) #–ø—Ä–∏–º–µ—Ä –∫–æ–ª–±—ç–∫–æ–≤—Å–∫–æ–≥–æ —Ö—ç–Ω–¥–ª–µ—Ä–∞+ –∏–Ω–ª–∞–π–Ω –æ—Ç–≤–µ—Ç ,(edit_text –¥–ª—è –æ—Ç–≤–µ—Ç–∞), await –ø–µ—Ä–µ–¥ –ø—É—Ç–µ–º –æ—Ç–≤–µ—Ç–∞ —Ç.–∫ —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è



@router.callback_query(F.data == "My commands")
async def my_commands(callback: CallbackQuery):
    await callback.answer("") #–∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + show_alert=True –¥–µ–ª–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    await callback.message.edit_text("–í–æ—Ç –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —è —Å–¥–µ–ª–∞–ª:", reply_markup=await kb.inline_commands())




@router.message(Command("start"))
async def step_one(message: Message, state: FSMContext):
    await state.set_state(Reg.name)    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.–∏–º—è
    users[f'{message.from_user.id}'] = User(message.from_user.id)
    await message.answer("üëã–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:")

@router.message(Reg.name)
async def step_two(message: Message, state: FSMContext):   # –°–ª–æ–≤–∏–ª–µ –∏–º—è
    users[f'{message.from_user.id}'].name = message.text
    await state.set_state(Reg.Age)  #–ò–∑–º–µ–Ω–∏–ª–∏ —Å—Ç–æ—è—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")


@router.message(Reg.Age)
async def step_three(message: Message, state: FSMContext):
    users[f'{message.from_user.id}'].age = int(message.text)

    await state.set_state(Reg.Sex)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–æ–ª:")




@router.message(Reg.Sex)
async def step_four(message: Message, state: FSMContext):
    users[f'{message.from_user.id}'].sex = message.text
    user = users[f'{message.from_user.id}']
    user.save()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞üòÄ.–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüëá\n\n{user}", reply_markup=kb.main_menu_button(message.from_user.id))
    await state.clear()


@router.message(Command("allusers"))
async def show_users(msg: Message):
    for user in User.get_all_users().values():
        await msg.answer(str(user))




@router.message()
async def noCommands_handler(msg: Message):
    await msg.reply("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç—É")